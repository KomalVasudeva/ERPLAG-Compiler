declare module satwadhi ;
declare module kela ;


<<module kela>>
takes input [a:array[0..10] of integer] ;
returns [b : boolean] ;
start
	declare i, j:integer ;
	declare bool:array[0..10] of boolean ;
	i := 0 ;

	while ((a + b > c[4] OR false) AND (i < 11))
	start
		bool[i] := (i*a[i] - (n*n*3.1419/2.713)) > 69 ;
		i := i + 1 ;	
	end

	for (i in 0..10)
	start
		tmp := b[i] ;
		switch (tmp)
		start
			case true :
				tmp := false ;		
				break ;
			case false :
				tmp := true ;
				break ;
		end
		b[i] := tmp ;
	end

	for (i in 0..10)
	start
		j := i ;
		while (j <= i)
		start
			b := b[j] OR b ;
			j := j + 1 ;
		end
	end
end

<<<driver program>>>
start
	declare patil:array[0..10] of boolean ;
	declare a, b, f : array [0..100] of real ;
	declare pai:integer ;

	patil[pai] := a+b[5]-c > 4 OR false AND b[4] > c - a[4] + e*f[5] ;

	declare kelaRet:boolean ;
	declare kelaCall:array[0..10] of integer ;

	[kelaRet] := use module kela with parameters kelaCall ;

	declare satwadhiA, satwadhiB, satwadhiC : integer ;
	declare satwadhiSum, satwadhiMul : real ;
	satwadhiA := 4 ;
	satwadhiB := satwadhiA*4/(pai*b[4]) ;
	satwadhiC := -satwadhiA ;

	[satwadhiSum, satwadhiMul] := use module satwadhi with parameters satwadhiA, satwadhiB, satwadhiC ;
end


<<module satwadhi>>
takes input [a:integer,b:integer,c:integer] ;
returns [sum:real, mul:real] ;
start	
	sum := ((((a + b + c)))) ;
	mul := -(sum/a*(b*b + (b - a*c))) ;
end
