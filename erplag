#! /bin/bash

# erplag -a file.erp 			--> Generates file.asm
# erplag file.asm				--> Generates file executable 
# erplag -o testExec file.erp   --> Generates executable with the name (Creates temp files)
# erplag file.erp 				--> Generates file executable directly (Creates temp files)

CYAN='\033[1;36m'
RED='\033[1;31m'
WHITE='\033[1;37m'
YELLOW='\033[1;33m'
BOLD='\033[1m'
MAGENTA='\033[1;35m'
GREEN='\033[1;32m'
RESET='\033[0m'


errHead () {
	erplagHead 
	printf "${RED}FATAL ERROR ${RESET}${BOLD}--> ${RESET}"
}

erplagHead () {
	printf "${BOLD}${CYAN}ERPLAG : "
}

erpHelp () {
	printf "${BOLD}${GREEN}The compiler can be used with the following options - ${RESET}\n"
	printf "${BOLD}1. ${CYAN}erplag -a ${RESET}${BOLD}<filename>.erp ${RESET}generates a ${BOLD}.asm ${RESET}file with the same filename\n"
	printf "${BOLD}2. ${CYAN}erplag ${RESET}${BOLD}<filename>.asm ${RESET}generates an executable with the same filename\n"
	printf "${BOLD}3. ${CYAN}erplag -o ${RESET}${BOLD}myexec <filename>.erp ${RESET}generates an executable file named ${BOLD}myexec${RESET}\n"
	printf "${BOLD}4. ${CYAN}erplag ${RESET}${BOLD}<filename>.erp ${RESET}directly generates an executable with the same filename\n\n"
	printf "If you are making any changes to the ${BOLD}${GREEN}source code ${RESET}or the ${BOLD}${CYAN}erplag, erpclr ${RESET}scripts, make sure to run ${BOLD}${CYAN}./rebuild ${RESET} afterwards\n"
	printf "A script named ${BOLD}${CYAN}erpclr${RESET} can be used to clean any ${BOLD}.asm, .o ${RESET}and ${BOLD}executable ${RESET}files recursively in a folder that contains only ERPLAG source files. ${BOLD}${RED}Use it with caution in other directories${RESET}\n\n"
	printf "${BOLD}${YELLOW}Use ${CYAN}make debug ${YELLOW}to create the following executables useful for debugging - ${RESET}\n"
	printf "${BOLD}1. ${CYAN}ast ${RESET}- To debug the abstract syntax tree (described in ${BOLD}astDriver.c${RESET})\n"
	printf "${BOLD}2. ${CYAN}ST ${RESET}- To debug the symbol table (described in ${BOLD}symbolTableDriver.c${RESET})\n"
	printf "${BOLD}3. ${CYAN}compiler ${RESET}- To debug the final compiler (described in ${BOLD}erplag.c${RESET})\n"
	printf "Run ${BOLD}${CYAN}make clean ${RESET}to remove any ${BOLD}.o ${RESET}files or debugging ${BOLD}executables ${RESET}\n\n"
	printf "${BOLD}${MAGENTA}The compiler can be uninstalled from the git repository using ${BOLD}${CYAN}./uninstall${RESET}\n"
}

successErpExe () {
	erplagHead
	printf "${BOLD}${GREEN}Compilation of ${RESET}${BOLD}$1 ${GREEN}successfull! Executable file ${RESET}${BOLD}$2 ${GREEN}generated${RESET}\n"
}

successErpAsm () {
	erplagHead
	printf "${BOLD}${GREEN}Compilation of ${RESET}${BOLD}$1 ${GREEN}successful! Assembly file ${RESET}${BOLD}$2 ${GREEN}generated${RESET}\n"
}

successAsmExe () {
	erplagHead
	printf "${BOLD}${GREEN}Assembly of ${RESET}${BOLD}$1 ${GREEN}successful! Executable file ${RESET}${BOLD}$2 ${GREEN}generated${RESET}\n"
}

optflag=0
while getopts ":a:o:h" opt; do
	optflag=1
	case ${opt} in
		h)	erpHelp
			exit 0
			;;
		a)	.compiler $OPTARG
			status=$?
			fname=${OPTARG:0:${#OPTARG}-4}
			asmname=${fname}.asm
			if [ $status -eq 0 ]
			then
				successErpAsm $OPTARG $asmname
			else

			exit $status
			;;
		o)	target=$OPTARG 
			shift $(($OPTIND-1))
			srcname=$1

			if test "$srcname" = ""
			then
				errHead
				echo "No source file"
				exit 1
			fi

			asmname=${srcname}.asm
			.compiler $srcname $asmname 
			status=$? 
			if [ $status -eq 0 ]
			then
				objname=${srcname}.o

				if [[ "$OSTYPE" == "linux-gnu"* ]]
				then
				    nasm -felf64 $asmname -o $objname  
				elif [[ "$OSTYPE" == "darwin"* ]]
				then
				    nasm -fmacho64 $asmname -o $objname
				fi

				gcc -w -no-pie $objname -o $target 
				successErpExe $srcname $target
			fi
			rm -f $asmname
			rm -f $objname

			exit $status
			;;
		\?) errHead
			echo "Invalid option. Use ${BOLD}${CYAN}-a ${RESET}to generate x86 assembly or use ${BOLD}${CYAN}-o ${RESET}along with output name to generate executable"
			exit 1
			;;
		:)  errHead
			echo "Please provide output file name" 
			exit 1
	esac
done

if [ $optflag -eq 0 ]
then
	srcname=$1 ;
	if [[ $srcname =~ \.asm$ ]] 
	then
		# Need to check if file exists or not in bash
		if [ -f $srcname ] 
		then
			fname=${srcname:0:${#srcname}-4} 
			objname=${srcname}.o

			if [[ "$OSTYPE" == "linux-gnu"* ]]
			then
				nasm -felf64 $srcname -o $objname
			elif [[ "$OSTYPE" == "darwin"* ]]
			then
				nasm -fmacho64 $srcname -o $objname
			fi

			gcc -w -no-pie $objname -o $fname 
			rm -f $objname
			successAsmExe $srcname $fname

			exit 0
		else
			errHead 
			printf "Assembly file ${BOLD}$srcname ${RESET}does not exist\n"

			exit 1
		fi
	elif [[ $srcname =~ \.erp$ ]] 
	then
		fname=${srcname:0:${#srcname}-4} 
		asmname=${srcname}.asm
		objname=${srcname}.o
		.compiler $srcname $asmname
		status=$? 
		if [ $status -eq 0 ]
		then

			if [[ "$OSTYPE" == "linux-gnu"* ]]
			then
				nasm -felf64 $asmname -o $objname
			elif [[ "$OSTYPE" == "darwin"* ]]
			then
				nasm -fmacho64 $asmname -o $objname
			fi

			gcc -w -no-pie $objname -o $fname
			successErpExe $srcname $fname
		fi
		rm -f $asmname
		rm -f $objname

		exit $status
	elif test "$srcname" = ""
	then
		errHead 
		echo "No source file"
		exit 1
	else
		errHead
		printf "Unsupported file format. Use ${BOLD}.erp ${RESET}for source files and ${BOLD}.asm ${RESET}for x86 assembly files\n"
		exit 1
	fi
fi
