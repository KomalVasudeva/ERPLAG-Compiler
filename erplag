#! /bin/bash

# erplag -a file.erp 			--> Generates file.asm
# erplag file.asm				--> Generates file executable 
# erplag -o testExec file.erp   --> Generates executable with the name (Creates temp files)
# erplag file.erp 				--> Generates file executable directly (Creates temp files)

CYAN='\033[1;36m'
RED='\033[1;31m'
BOLD='\033[1m'
GREEN='\033[1;32m'
RESET='\033[0m'


errHead () {
	printf "${CYAN}ERPLAG : ${RED}FATAL ERROR ${RESET}${BOLD}--> ${RESET}"
}

erpHelp () {
	printf "${BOLD}The compiler can be used with the following options - ${RESET}\n\n"
	printf "${BOLD}${CYAN}erplag -a <filename>.erp ${RESET}generates a .asm file with the same filename\n"
	printf "${BOLD}${CYAN}erplag <filename>.asm ${RESET}generates an executable with the same filename\n"
	printf "${BOLD}${CYAN}erplag -o myexec <filename>.erp ${RESET}generates an executable file named ${BOLD}${CYAN}myexec${RESET}\n"
	printf "${BOLD}${CYAN}erplag <filename>.erp ${RESET}directly generates an executable with the same filename\n\n"
	printf "If you are making any changes to the source code or the compiler script, make sure to run ${BOLD}${CYAN}./cc ${RESET} afterwards\n"
	printf "The .${BOLD}${CYAN}\\Testcases ${RESET}folder has a script named ${BOLD}${CYAN}clean.sh${RESET}. This can be used to clean any .asm, .o and executable files recursively in the folder\n\n"
	printf "${BOLD}${RED}WARNING : DO NOT RUN clean.sh IN THE REPOSITORY FOLDER. IT WILL DELETE ESSENTIAL FILES OF THE COMPILER!${RESET}\n"
}

success () {
	printf "${BOLD}${GREEN}Compilation successful${RESET}\n"
}

optflag=0
while getopts ":a:o:h" opt; do
	optflag=1
	case ${opt} in
		h)	erpHelp
			exit 0
			;;
		a)	.compiler $OPTARG
			status=$?
			if [ $status -eq 0 ]
			then
				success 
			elif [ $status -eq 2 ]
			then
				fname=${OPTARG:0:${#OPTARG}-4}
				echo $fname
				asmname=${fname}.asm
				rm -f $asmname
			fi
			;;
		o)	target=$OPTARG 
			shift $(($OPTIND-1))
			srcname=$1

			if test "$srcname" = ""
			then
				errHead
				echo "No source file"
				exit 1
			fi

			asmname=${srcname}.asm
			.compiler $srcname $asmname 
			status=$? 
			if [ $status -eq 0 ]
			then
				objname=${srcname}.o

				if [[ "$OSTYPE" == "linux-gnu"* ]]
				then
				    nasm -felf64 $asmname -o $objname  
				elif [[ "$OSTYPE" == "darwin"* ]]
				then
				    nasm -fmacho64 $asmname -o $objname
				fi

				gcc -w -no-pie $objname -o $target 
				success
			fi
			rm -f $asmname
			rm -f $objname
			;;
		\?) errHead
			echo "Invalid option. Use -a to generate x86 assembly or use -o along with output name to generate executable"
			exit 1
			;;
		:)  errHead
			echo "Please provide output file name" 
			exit 1
	esac
done

if [ $optflag -eq 0 ]
then
	srcname=$1 ;
	if [[ $srcname =~ \.asm$ ]] 
	then
		# Need to check if file exists or not in bash
		if [ -f $srcname ] 
		then
			fname=${srcname:0:${#srcname}-4} 
			objname=${srcname}.o

			if [[ "$OSTYPE" == "linux-gnu"* ]]
			then
				nasm -felf64 $srcname -o $objname
			elif [[ "$OSTYPE" == "darwin"* ]]
			then
				nasm -fmacho64 $srcname -o $objname
			fi

			gcc -w -no-pie $objname -o $fname 
			rm -f $objname
			success
		else
			errHead 
			echo "ASM file $srcname does not exist" 
		fi
	elif [[ $srcname =~ \.erp$ ]] 
	then
		fname=${srcname:0:${#srcname}-4} 
		asmname=${srcname}.asm
		objname=${srcname}.o
		.compiler $srcname $asmname
		status=$? 
		if [ $status -eq 0 ]
		then

			if [[ "$OSTYPE" == "linux-gnu"* ]]
			then
				nasm -felf64 $asmname -o $objname
			elif [[ "$OSTYPE" == "darwin"* ]]
			then
				nasm -fmacho64 $asmname -o $objname
			fi

			gcc -w -no-pie $objname -o $fname
			success
		fi
		rm -f $asmname
		rm -f $objname
	elif test "$srcname" = ""
	then
		errHead 
		echo "No source file"
	else
		errHead
		echo "Unsupported file format. Use .erp for source files and .asm for x86 assembly files" ;
	fi
fi